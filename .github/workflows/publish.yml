name: Publish Java artifacts to Maven Central & GitHub Packages  # ginger-j

on:
  push:
    tags: [ 'v*.*.*' ]   # semantic version tags only
  workflow_dispatch: {}  # manual runs

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

env:
  REPO: ${{ github.event.repository.name }}

jobs:
  check-version:
    name: Validate tag and POM version alignment
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.vers.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag (strip leading v)
        id: vers
        shell: bash
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Validate version format X.Y.Z
        shell: bash
        run: |
          [[ "${{ steps.vers.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] || {
            echo "Invalid version: '${{ steps.vers.outputs.version }}'"; exit 1;
          }

      - name: Compare POM version with tag version
        shell: bash
        run: |
          POM_VERSION="$(mvn -q -DforceStdout help:evaluate -Dexpression=project.version)"
          if [[ "$POM_VERSION" != "${{ steps.vers.outputs.version }}" ]]; then
            echo "POM version ($POM_VERSION) does not match tag version (${{ steps.vers.outputs.version }})"
            exit 1
          fi

  publish:
    name: Build, stage artifacts, publish to Central & GH Packages
    runs-on: ubuntu-24.04
    needs: [check-version]
    permissions:
      contents: write
      packages: write
    outputs:
      release_timestamp: ${{ steps.release-notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release-notification.outputs.channel_id }}
      version: ${{ needs.check-version.outputs.version }}
    steps:
      - name: Notify release start
        id: release-notification
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          github-token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 21 (Temurin) with Maven cache
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Write settings.xml for Maven Central
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<'EOF'
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${env.MAVEN_CENTRAL_USERNAME}</username>
                <password>${env.MAVEN_CENTRAL_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}

      - name: Import GPG key for signing
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Update POM version to tag version
        run: mvn -B versions:set -DnewVersion='${{ needs.check-version.outputs.version }}' -DgenerateBackupPoms=false

      # Build first so we always have artifacts even if deploy later fails
      - name: Build package (skip tests)
        run: mvn -B -DskipTests package

      - name: Collect JVM artifacts
        run: |
          mkdir -p artifacts/jvm
          cp -r target/*.jar artifacts/jvm/ 2>/dev/null || true
          cp -r target/*.pom artifacts/jvm/ 2>/dev/null || true
          cp -r pom.xml artifacts/jvm/

      - name: Upload JVM build artifacts (stable name)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-binary-${{ github.run_id }}
          path: artifacts/jvm/**
          if-no-files-found: warn
          retention-days: 7

      - name: Publish to Maven Central
        run: mvn --batch-mode -P maven-central deploy
        env:
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Set up Java 21 for GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Publish to GitHub Packages
        run: mvn --batch-mode -P github deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  scan:
    name: Scan all artifacts and upload results
    runs-on: ubuntu-24.04
    needs: [publish]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: ${{ env.REPO }}-binary-*
          merge-multiple: true

      - name: Run Spice-Labs CLI scan over ALL artifacts
        uses: spice-labs-inc/action-spice-labs-cli-scan@v3
        with:
          spice_pass: ${{ secrets.SPICE_PASS }}
          file_path: artifacts
          tag: ${{ env.REPO }}

      - name: Upload scan outputs (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO }}-scan-${{ github.run_id }}
          path: artifacts/**/*.adg.json
          if-no-files-found: ignore
          retention-days: 7

  notify:
    name: Notify deployment result
    needs: [publish]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Compute status
        id: status
        shell: bash
        run: |
          if [[ "${{ needs.publish.result }}" == "success" ]]; then
            echo "overall_status=deployment-success" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=deployment-failure" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release - Publishing failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify Slack
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: ${{ steps.status.outputs.overall_status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          workflow-name: ${{ steps.status.outputs.workflow_name }}
          environment: production
          thread-ts: ${{ needs.publish.outputs.release_timestamp }}
          channel-id: ${{ needs.publish.outputs.release_channel_id }}
