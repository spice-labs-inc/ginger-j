name: Publish package to Maven Central and GitHub Packages  # ginger-j

on:
  push:
    branches:
      - main
      - mj/cli-scan        # remove before merging
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  build_and_scan_branch:
    name: Build and scan (branch builds only)
    if: ${{ github.ref_type == 'branch' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java (Temurin 21)
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Build artifacts (for scan)
        run: mvn --batch-mode -DskipTests package

      - name: Index and upload ADG
        uses: spice-labs-inc/action-spice-labs-cli-scan@v3
        with:
          spice_pass: "${{ secrets.SPICE_PASS }}"
          file_path: "${{ github.workspace }}/target"
          tag: "${{ github.event.repository.name }}"

  release_publish:
    name: Publish to Central and GitHub Packages (tags only)
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.tag.outputs.version }}
      release_timestamp: ${{ steps.release_notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release_notification.outputs.channel_id }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate and extract version from tag
        id: tag
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a semantic version tag (vX.Y.Z): ${GITHUB_REF}" >&2
            exit 1
          fi

      - name: Ensure tag commit is on main (required for public releases)
        id: onmain
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags origin +refs/heads/main:refs/remotes/origin/main
          if git merge-base --is-ancestor "${GITHUB_SHA}" "origin/main"; then
            echo "on_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "on_main=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up Java (Temurin 21)
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "temurin"
          cache: "maven"

      - name: Write settings.xml for Central and GitHub
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.MAVEN_CENTRAL_USERNAME }}</username>
                <password>${{ secrets.MAVEN_CENTRAL_PASSWORD }}</password>
              </server>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Import GPG key
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Set project version from tag
        run: mvn -B versions:set -DnewVersion="${{ steps.tag.outputs.version }}" -DgenerateBackupPoms=false

      - name: Build artifacts (for publication & scan)
        run: mvn --batch-mode -DskipTests package

      - name: Publish to Maven Central
        if: steps.onmain.outputs.on_main == 'true'
        env:
          GPG_PASSPHRASE: "${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}"
        run: mvn --batch-mode deploy -P maven-central

      - name: Publish to GitHub Packages
        if: steps.onmain.outputs.on_main == 'true'
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: mvn --batch-mode deploy -P github

      - name: Index and upload ADG
        uses: spice-labs-inc/action-spice-labs-cli-scan@v3
        with:
          spice_pass: "${{ secrets.SPICE_PASS }}"
          file_path: "${{ github.workspace }}/target"
          tag: "${{ github.event.repository.name }}"

      - name: Notify release
        id: release_notification
        continue-on-error: true
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: release
          slack-bot-token: "${{ secrets.SLACK_BOT_TOKEN }}"
          username-mapping: "${{ secrets.GH_SLACK_USERNAME_MAPPING }}"
          github-token: "${{ github.token }}"
          channel-id: "${{ secrets.SLACK_RELEASE_CHANNEL_ID }}"
          channel: "#release-notifications"

  notify:
    needs: [release_publish]
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Check deployment status
        id: deployment_status
        shell: bash
        run: |
          PUBLISH_STATUS="${{ needs.release_publish.result }}"
          if [ "$PUBLISH_STATUS" = "success" ]; then
            echo "overall_status=success" >> "$GITHUB_OUTPUT"
            echo "message=All components published successfully" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=failure" >> "$GITHUB_OUTPUT"
            echo "message=Publishing failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify deployment result
        continue-on-error: true
        uses: spice-labs-inc/action-release-notification@main
        with:
          type: ${{ steps.deployment_status.outputs.overall_status == 'success' && 'deployment-success' || 'deployment-failure' }}
          slack-bot-token: "${{ secrets.SLACK_BOT_TOKEN }}"
          username-mapping: "${{ secrets.GH_SLACK_USERNAME_MAPPING }}"
          workflow-name: Release
          environment: production
          channel-id: "${{ needs.release_publish.outputs.release_channel_id || secrets.SLACK_RELEASE_CHANNEL_ID }}"
          channel: "#release-notifications"
