name: Publish package to Maven Central and Github Packages

on:
  push:
    tags: [ 'v*.*.*' ]  # Trigger only on semantic version tags
  workflow_dispatch: {}  # Manual trigger

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.tag.outputs.version }}
      release_timestamp: ${{ steps.release-notification.outputs.timestamp }}
      release_channel_id: ${{ steps.release-notification.outputs.channel_id }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get version from tag (strip 'v')
        id: tag
        run: |
          RAW_TAG="${{ github.ref_name }}"
          VERSION="${RAW_TAG#v}"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release from tag
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Wait for release propagation
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set +e
          TAG="${{ github.ref_name }}"
          for i in {1..20}; do
            gh api "repos/${GITHUB_REPOSITORY}/releases/tags/${TAG}" >/dev/null 2>&1 && break
            echo "Release for ${TAG} not visible yet; retry ${i}/20"
            sleep 3
          done

      - name: Notify release
        id: release-notification
        uses: spice-labs-inc/action-release-notification@v1
        with:
          type: release
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          github-token: ${{ github.token }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Set up Java (Temurin 21) with Maven cache
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Write settings.xml for Central
        shell: bash
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${MAVEN_CENTRAL_USERNAME}</username>
                <password>${MAVEN_CENTRAL_PASSWORD}</password>
              </server>
            </servers>
          </settings>
          EOF
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}

      - name: Import GPG key
        shell: bash
        run: |
          echo "${{ secrets.MAVEN_CENTRAL_GPG_PRIVATE_KEY }}" | gpg --batch --import

      - name: Update version in pom.xml
        run: mvn -B versions:set -DnewVersion="${{ steps.tag.outputs.version }}" -DgenerateBackupPoms=false

      - name: Build (no tests)
        run: mvn -B -DskipTests package

      - name: Scan built artifacts with Spice-Labs CLI
        shell: bash
        env:
          SPICE_PASS: ${{ secrets.SPICE_PASS }}
        run: |
          docker run --rm             -v "$PWD/target:/mnt/input:ro"             -e SPICE_PASS             spicelabs/spice-labs-cli:latest             --input /mnt/input             --tag "ginger-j-${{ steps.tag.outputs.version }}"

      - name: Publish to Maven Central
        run: mvn --batch-mode deploy -P maven-central
        env:
          GPG_PASSPHRASE: ${{ secrets.MAVEN_CENTRAL_GPG_PASSPHRASE }}

      - name: Resolve Maven coordinates
        id: gav
        run: |
          GROUP_ID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.groupId)
          ARTIFACT_ID=$(mvn -q -DforceStdout help:evaluate -Dexpression=project.artifactId)
          echo "group_id=$GROUP_ID" >> "$GITHUB_OUTPUT"
          echo "artifact_id=$ARTIFACT_ID" >> "$GITHUB_OUTPUT"

      - name: Link to Maven Central Deployment
        if: always()
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          GROUP_ID="${{ steps.gav.outputs.group_id }}"
          ARTIFACT_ID="${{ steps.gav.outputs.artifact_id }}"
          echo "Check deployment status in Sonatype Central:"
          echo "https://central.sonatype.com/publishing/deployments?name=${GROUP_ID}:${ARTIFACT_ID}&version=${VERSION}"

      - name: Set up Java for GitHub Packages
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Publish to GitHub Packages
        run: mvn --batch-mode deploy -P github
        env:
          GITHUB_TOKEN: ${{ github.token }}

  notify:
    needs: [publish]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Compute status
        id: deployment-status
        shell: bash
        run: |
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "overall_status=deployment-success" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release" >> "$GITHUB_OUTPUT"
          else
            echo "overall_status=deployment-failure" >> "$GITHUB_OUTPUT"
            echo "workflow_name=Release - Publishing failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Notify deployment result
        uses: spice-labs-inc/action-release-notification@v1
        with:
          type: ${{ steps.deployment-status.outputs.overall_status }}
          slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          username-mapping: ${{ secrets.GH_SLACK_USERNAME_MAPPING }}
          workflow-name: ${{ steps.deployment-status.outputs.workflow_name }}
          environment: production
          thread-ts: ${{ needs.publish.outputs.release_timestamp }}
          channel-id: ${{ needs.publish.outputs.release_channel_id }}
          github-token: ${{ github.token }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
